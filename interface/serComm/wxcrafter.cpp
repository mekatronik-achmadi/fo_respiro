//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// wxCrafter project file: wxcrafter.wxcp
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "wxcrafter.h"

// Declare the bitmap loading function
extern void wxC9ED9InitBitmapResources();

static bool bBitmapLoaded = false;

MainFrameBaseClass::MainFrameBaseClass(wxWindow* parent,
    wxWindowID id,
    const wxString& title,
    const wxPoint& pos,
    const wxSize& size,
    long style)
    : wxFrame(parent, id, title, pos, size, style)
{
    if(!bBitmapLoaded) {
	// We need to initialise the default bitmap handler
	wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
	wxC9ED9InitBitmapResources();
	bBitmapLoaded = true;
    }

    wxBoxSizer* boxMain = new wxBoxSizer(wxHORIZONTAL);
    this->SetSizer(boxMain);

    m_txtCSV = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)),
        wxTE_WORDWRAP | wxTE_READONLY | wxTE_MULTILINE);

    boxMain->Add(m_txtCSV, 1, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    wxBoxSizer* boxComm = new wxBoxSizer(wxVERTICAL);

    boxMain->Add(boxComm, 1, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    m_txtComm = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)),
        wxTE_WORDWRAP | wxTE_READONLY | wxTE_MULTILINE);

    boxComm->Add(m_txtComm, 1, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    m_txtData = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_txtData->SetHint(wxT(""));
#endif

    boxComm->Add(m_txtData, 0, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    m_menuBar = new wxMenuBar(0);
    this->SetMenuBar(m_menuBar);

    m_mnFile = new wxMenu();
    m_menuBar->Append(m_mnFile, _("File"));

    m_mnExit = new wxMenuItem(m_mnFile, wxID_EXIT, _("Exit\tAlt-X"), _("Quit"), wxITEM_NORMAL);
    m_mnFile->Append(m_mnExit);

    m_mnHelp = new wxMenu();
    m_menuBar->Append(m_mnHelp, _("Help"));

    m_mnAbout = new wxMenuItem(m_mnHelp, wxID_ABOUT, _("About..."), wxT(""), wxITEM_NORMAL);
    m_mnHelp->Append(m_mnAbout);

    m_mainToolbar = this->CreateToolBar(wxTB_FLAT, wxID_ANY);
    m_mainToolbar->SetToolBitmapSize(wxSize(16, 16));

    m_btnSerOpen = new wxButton(
        m_mainToolbar, wxID_ANY, _("Open"), wxDefaultPosition, wxDLG_UNIT(m_mainToolbar, wxSize(-1, -1)), 0);
    m_mainToolbar->AddControl(m_btnSerOpen);

    m_btnSerTest = new wxButton(
        m_mainToolbar, wxID_ANY, _("Test"), wxDefaultPosition, wxDLG_UNIT(m_mainToolbar, wxSize(-1, -1)), 0);
    m_mainToolbar->AddControl(m_btnSerTest);

    wxArrayString m_cmbSerPortArr;
    m_cmbSerPort = new wxComboBox(m_mainToolbar, wxID_ANY, wxT(""), wxDefaultPosition,
        wxDLG_UNIT(m_mainToolbar, wxSize(-1, -1)), m_cmbSerPortArr, 0);
#if wxVERSION_NUMBER >= 3000
    m_cmbSerPort->SetHint(wxT(""));
#endif
    m_mainToolbar->AddControl(m_cmbSerPort);
    m_mainToolbar->Realize();

    SetName(wxT("MainFrameBaseClass"));
    SetMinClientSize(wxSize(700, 500));
    SetSize(wxDLG_UNIT(this, wxSize(700, 500)));
    if(GetSizer()) {
	GetSizer()->Fit(this);
    }
    if(GetParent()) {
	CentreOnParent(wxBOTH);
    } else {
	CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
	wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
	wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    this->Connect(
        m_mnExit->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnExit), NULL, this);
    this->Connect(m_mnAbout->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnAbout),
        NULL, this);
    m_btnSerOpen->Connect(
        wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBaseClass::OnSerOpenClicked), NULL, this);
    m_btnSerTest->Connect(
        wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBaseClass::OnBtnSerTest), NULL, this);
    m_cmbSerPort->Connect(
        wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnCmbPortSelected), NULL, this);
}

MainFrameBaseClass::~MainFrameBaseClass()
{
    this->Disconnect(
        m_mnExit->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnExit), NULL, this);
    this->Disconnect(m_mnAbout->GetId(), wxEVT_COMMAND_MENU_SELECTED,
        wxCommandEventHandler(MainFrameBaseClass::OnAbout), NULL, this);
    m_btnSerOpen->Disconnect(
        wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBaseClass::OnSerOpenClicked), NULL, this);
    m_btnSerTest->Disconnect(
        wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBaseClass::OnBtnSerTest), NULL, this);
    m_cmbSerPort->Disconnect(
        wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnCmbPortSelected), NULL, this);
}
